import {
  __commonJS
} from "./chunk-PR4QN5HX.js";

// node_modules/gif.js.optimized/dist/gif.js
var require_gif = __commonJS({
  "node_modules/gif.js.optimized/dist/gif.js"(exports, module) {
    !function(t, e) {
      "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports.GIF = e() : t.GIF = e();
    }(exports, function() {
      return function(t) {
        function e(n) {
          if (i[n]) return i[n].exports;
          var r = i[n] = { exports: {}, id: n, loaded: false };
          return t[n].call(r.exports, r, r.exports, e), r.loaded = true, r.exports;
        }
        var i = {};
        return e.m = t, e.c = i, e.p = "", e(0);
      }([function(t, e, i) {
        var n, r, s, o = function(t2, e2) {
          function i2() {
            this.constructor = t2;
          }
          for (var n2 in e2) a.call(e2, n2) && (t2[n2] = e2[n2]);
          return i2.prototype = e2.prototype, t2.prototype = new i2(), t2.__super__ = e2.prototype, t2;
        }, a = {}.hasOwnProperty, h = [].indexOf || function(t2) {
          for (var e2 = 0, i2 = this.length; e2 < i2; e2++) if (e2 in this && this[e2] === t2) return e2;
          return -1;
        };
        n = i(1).EventEmitter, s = i(2), r = function(t2) {
          function e2(t3) {
            var e3, n3, r2;
            this.running = false, this.options = {}, this.frames = [], this.groups = /* @__PURE__ */ new Map(), this.freeWorkers = [], this.activeWorkers = [], this.setOptions(t3);
            for (n3 in i2) r2 = i2[n3], null == (e3 = this.options)[n3] && (e3[n3] = r2);
          }
          var i2, n2;
          return o(e2, t2), i2 = { workerScript: "gif.worker.js", workers: 2, repeat: 0, background: "#fff", quality: 10, width: null, height: null, transparent: null, debug: false }, n2 = { delay: 500, copy: false }, e2.prototype.setOption = function(t3, e3) {
            if (this.options[t3] = e3, null != this._canvas && ("width" === t3 || "height" === t3)) return this._canvas[t3] = e3;
          }, e2.prototype.setOptions = function(t3) {
            var e3, i3, n3;
            i3 = [];
            for (e3 in t3) a.call(t3, e3) && (n3 = t3[e3], i3.push(this.setOption(e3, n3)));
            return i3;
          }, e2.prototype.addFrame = function(t3, e3) {
            var i3, r2, s2;
            null == e3 && (e3 = {}), i3 = {}, i3.transparent = this.options.transparent;
            for (s2 in n2) i3[s2] = e3[s2] || n2[s2];
            if (null == this.options.width && this.setOption("width", t3.width), null == this.options.height && this.setOption("height", t3.height), "undefined" != typeof ImageData && null !== ImageData && t3 instanceof ImageData) i3.data = t3.data;
            else if ("undefined" != typeof CanvasRenderingContext2D && null !== CanvasRenderingContext2D && t3 instanceof CanvasRenderingContext2D || "undefined" != typeof WebGLRenderingContext && null !== WebGLRenderingContext && t3 instanceof WebGLRenderingContext) e3.copy ? i3.data = this.getContextData(t3) : i3.context = t3;
            else {
              if (null == t3.childNodes) throw new Error("Invalid image");
              e3.copy ? i3.data = this.getImageData(t3) : i3.image = t3;
            }
            return r2 = this.frames.length, r2 > 0 && i3.data && (this.groups.has(i3.data) ? this.groups.get(i3.data).push(r2) : this.groups.set(i3.data, [r2])), this.frames.push(i3);
          }, e2.prototype.render = function() {
            var t3, e3, i3, n3;
            if (this.running) throw new Error("Already running");
            if (null == this.options.width || null == this.options.height) throw new Error("Width and height must be set prior to rendering");
            if (this.running = true, this.nextFrame = 0, this.finishedFrames = 0, this.imageParts = (function() {
              var e4, i4, n4;
              for (n4 = [], t3 = e4 = 0, i4 = this.frames.length; 0 <= i4 ? e4 < i4 : e4 > i4; t3 = 0 <= i4 ? ++e4 : --e4) n4.push(null);
              return n4;
            }).call(this), i3 = this.spawnWorkers(), this.options.globalPalette === true) this.renderNextFrame();
            else for (t3 = e3 = 0, n3 = i3; 0 <= n3 ? e3 < n3 : e3 > n3; t3 = 0 <= n3 ? ++e3 : --e3) this.renderNextFrame();
            return this.emit("start"), this.emit("progress", 0);
          }, e2.prototype.abort = function() {
            for (var t3; ; ) {
              if (t3 = this.activeWorkers.shift(), null == t3) break;
              this.log("killing active worker"), t3.terminate();
            }
            return this.running = false, this.emit("abort");
          }, e2.prototype.spawnWorkers = function() {
            var t3, e3, i3;
            return t3 = Math.min(this.options.workers, this.frames.length), (function() {
              i3 = [];
              for (var n3 = e3 = this.freeWorkers.length; e3 <= t3 ? n3 < t3 : n3 > t3; e3 <= t3 ? n3++ : n3--) i3.push(n3);
              return i3;
            }).apply(this).forEach(/* @__PURE__ */ function(t4) {
              return function(e4) {
                var i4;
                return t4.log("spawning worker " + e4), i4 = new Worker(t4.options.workerScript), i4.onmessage = function(e5) {
                  return t4.activeWorkers.splice(t4.activeWorkers.indexOf(i4), 1), t4.freeWorkers.push(i4), t4.frameFinished(e5.data, false);
                }, t4.freeWorkers.push(i4);
              };
            }(this)), t3;
          }, e2.prototype.frameFinished = function(t3, e3) {
            var i3, n3, r2, s2, o2;
            if (this.finishedFrames++, e3 ? (n3 = this.frames.indexOf(t3), r2 = this.groups.get(t3.data)[0], this.log("frame " + (n3 + 1) + " is duplicate of " + r2 + " - " + this.activeWorkers.length + " active"), this.imageParts[n3] = { indexOfFirstInGroup: r2 }) : (this.log("frame " + (t3.index + 1) + " finished - " + this.activeWorkers.length + " active"), this.emit("progress", this.finishedFrames / this.frames.length), this.imageParts[t3.index] = t3), this.options.globalPalette === true && !e3 && (this.options.globalPalette = t3.globalPalette, this.log("global palette analyzed"), this.frames.length > 2)) for (i3 = s2 = 1, o2 = this.freeWorkers.length; 1 <= o2 ? s2 < o2 : s2 > o2; i3 = 1 <= o2 ? ++s2 : --s2) this.renderNextFrame();
            return h.call(this.imageParts, null) >= 0 ? this.renderNextFrame() : this.finishRendering();
          }, e2.prototype.finishRendering = function() {
            var t3, e3, i3, n3, r2, s2, o2, a2, h2, l, f, p, u, d, c, g, v, m, y, _;
            for (v = this.imageParts, r2 = s2 = 0, l = v.length; s2 < l; r2 = ++s2) e3 = v[r2], e3.indexOfFirstInGroup && (this.imageParts[r2] = this.imageParts[e3.indexOfFirstInGroup]);
            for (h2 = 0, m = this.imageParts, o2 = 0, f = m.length; o2 < f; o2++) e3 = m[o2], h2 += (e3.data.length - 1) * e3.pageSize + e3.cursor;
            for (h2 += e3.pageSize - e3.cursor, this.log("rendering finished - filesize " + Math.round(h2 / 1e3) + "kb"), t3 = new Uint8Array(h2), c = 0, y = this.imageParts, a2 = 0, p = y.length; a2 < p; a2++) for (e3 = y[a2], _ = e3.data, i3 = d = 0, u = _.length; d < u; i3 = ++d) g = _[i3], t3.set(g, c), c += i3 === e3.data.length - 1 ? e3.cursor : e3.pageSize;
            return n3 = new Blob([t3], { type: "image/gif" }), this.emit("finished", n3, t3);
          }, e2.prototype.renderNextFrame = function() {
            var t3, e3, i3, n3;
            if (0 === this.freeWorkers.length) throw new Error("No free workers");
            if (!(this.nextFrame >= this.frames.length)) return t3 = this.frames[this.nextFrame++], e3 = this.frames.indexOf(t3), e3 > 0 && this.groups.has(t3.data) && this.groups.get(t3.data)[0] !== e3 ? void setTimeout(/* @__PURE__ */ function(e4) {
              return function() {
                return e4.frameFinished(t3, true);
              };
            }(this), 0) : (n3 = this.freeWorkers.shift(), i3 = this.getTask(t3), this.log("starting frame " + (i3.index + 1) + " of " + this.frames.length), this.activeWorkers.push(n3), n3.postMessage(i3));
          }, e2.prototype.getContextData = function(t3) {
            return t3.getImageData(0, 0, this.options.width, this.options.height).data;
          }, e2.prototype.getImageData = function(t3) {
            var e3;
            return null == this._canvas && (this._canvas = document.createElement("canvas"), this._canvas.width = this.options.width, this._canvas.height = this.options.height), e3 = this._canvas.getContext("2d"), e3.setFill = this.options.background, e3.fillRect(0, 0, this.options.width, this.options.height), e3.drawImage(t3, 0, 0), this.getContextData(e3);
          }, e2.prototype.getTask = function(t3) {
            var e3, i3;
            if (e3 = this.frames.indexOf(t3), i3 = { index: e3, last: e3 === this.frames.length - 1, delay: t3.delay, transparent: t3.transparent, width: this.options.width, height: this.options.height, quality: this.options.quality, dither: this.options.dither, globalPalette: this.options.globalPalette, repeat: this.options.repeat, canTransfer: true }, null != t3.data) i3.data = t3.data;
            else if (null != t3.context) i3.data = this.getContextData(t3.context);
            else {
              if (null == t3.image) throw new Error("Invalid frame");
              i3.data = this.getImageData(t3.image);
            }
            return i3;
          }, e2.prototype.log = function(t3) {
            if (this.options.debug) return console.log(t3);
          }, e2;
        }(n), t.exports = r;
      }, function(t, e) {
        function i() {
          this._events = this._events || {}, this._maxListeners = this._maxListeners || void 0;
        }
        function n(t2) {
          return "function" == typeof t2;
        }
        function r(t2) {
          return "number" == typeof t2;
        }
        function s(t2) {
          return "object" == typeof t2 && null !== t2;
        }
        function o(t2) {
          return void 0 === t2;
        }
        t.exports = i, i.EventEmitter = i, i.prototype._events = void 0, i.prototype._maxListeners = void 0, i.defaultMaxListeners = 10, i.prototype.setMaxListeners = function(t2) {
          if (!r(t2) || t2 < 0 || isNaN(t2)) throw TypeError("n must be a positive number");
          return this._maxListeners = t2, this;
        }, i.prototype.emit = function(t2) {
          var e2, i2, r2, a, h, l;
          if (this._events || (this._events = {}), "error" === t2 && (!this._events.error || s(this._events.error) && !this._events.error.length)) {
            if (e2 = arguments[1], e2 instanceof Error) throw e2;
            var f = new Error('Uncaught, unspecified "error" event. (' + e2 + ")");
            throw f.context = e2, f;
          }
          if (i2 = this._events[t2], o(i2)) return false;
          if (n(i2)) switch (arguments.length) {
            case 1:
              i2.call(this);
              break;
            case 2:
              i2.call(this, arguments[1]);
              break;
            case 3:
              i2.call(this, arguments[1], arguments[2]);
              break;
            default:
              a = Array.prototype.slice.call(arguments, 1), i2.apply(this, a);
          }
          else if (s(i2)) for (a = Array.prototype.slice.call(arguments, 1), l = i2.slice(), r2 = l.length, h = 0; h < r2; h++) l[h].apply(this, a);
          return true;
        }, i.prototype.addListener = function(t2, e2) {
          var r2;
          if (!n(e2)) throw TypeError("listener must be a function");
          return this._events || (this._events = {}), this._events.newListener && this.emit("newListener", t2, n(e2.listener) ? e2.listener : e2), this._events[t2] ? s(this._events[t2]) ? this._events[t2].push(e2) : this._events[t2] = [this._events[t2], e2] : this._events[t2] = e2, s(this._events[t2]) && !this._events[t2].warned && (r2 = o(this._maxListeners) ? i.defaultMaxListeners : this._maxListeners, r2 && r2 > 0 && this._events[t2].length > r2 && (this._events[t2].warned = true, console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[t2].length), "function" == typeof console.trace && console.trace())), this;
        }, i.prototype.on = i.prototype.addListener, i.prototype.once = function(t2, e2) {
          function i2() {
            this.removeListener(t2, i2), r2 || (r2 = true, e2.apply(this, arguments));
          }
          if (!n(e2)) throw TypeError("listener must be a function");
          var r2 = false;
          return i2.listener = e2, this.on(t2, i2), this;
        }, i.prototype.removeListener = function(t2, e2) {
          var i2, r2, o2, a;
          if (!n(e2)) throw TypeError("listener must be a function");
          if (!this._events || !this._events[t2]) return this;
          if (i2 = this._events[t2], o2 = i2.length, r2 = -1, i2 === e2 || n(i2.listener) && i2.listener === e2) delete this._events[t2], this._events.removeListener && this.emit("removeListener", t2, e2);
          else if (s(i2)) {
            for (a = o2; a-- > 0; ) if (i2[a] === e2 || i2[a].listener && i2[a].listener === e2) {
              r2 = a;
              break;
            }
            if (r2 < 0) return this;
            1 === i2.length ? (i2.length = 0, delete this._events[t2]) : i2.splice(r2, 1), this._events.removeListener && this.emit("removeListener", t2, e2);
          }
          return this;
        }, i.prototype.removeAllListeners = function(t2) {
          var e2, i2;
          if (!this._events) return this;
          if (!this._events.removeListener) return 0 === arguments.length ? this._events = {} : this._events[t2] && delete this._events[t2], this;
          if (0 === arguments.length) {
            for (e2 in this._events) "removeListener" !== e2 && this.removeAllListeners(e2);
            return this.removeAllListeners("removeListener"), this._events = {}, this;
          }
          if (i2 = this._events[t2], n(i2)) this.removeListener(t2, i2);
          else if (i2) for (; i2.length; ) this.removeListener(t2, i2[i2.length - 1]);
          return delete this._events[t2], this;
        }, i.prototype.listeners = function(t2) {
          var e2;
          return e2 = this._events && this._events[t2] ? n(this._events[t2]) ? [this._events[t2]] : this._events[t2].slice() : [];
        }, i.prototype.listenerCount = function(t2) {
          if (this._events) {
            var e2 = this._events[t2];
            if (n(e2)) return 1;
            if (e2) return e2.length;
          }
          return 0;
        }, i.listenerCount = function(t2, e2) {
          return t2.listenerCount(e2);
        };
      }, function(t, e) {
        var i, n, r, s, o;
        o = navigator.userAgent.toLowerCase(), s = navigator.platform.toLowerCase(), i = o.match(/(opera|ie|firefox|chrome|version)[\s\/:]([\w\d\.]+)?.*?(safari|version[\s\/:]([\w\d\.]+)|$)/) || [null, "unknown", 0], r = "ie" === i[1] && document.documentMode, n = { name: "version" === i[1] ? i[3] : i[1], version: r || parseFloat("opera" === i[1] && i[4] ? i[4] : i[2]), platform: { name: o.match(/ip(?:ad|od|hone)/) ? "ios" : (o.match(/(?:webos|android)/) || s.match(/mac|win|linux/) || ["other"])[0] } }, n[n.name] = true, n[n.name + parseInt(n.version, 10)] = true, n.platform[n.platform.name] = true, t.exports = n;
      }]);
    });
  }
});
export default require_gif();
//# sourceMappingURL=gif__js__optimized.js.map
